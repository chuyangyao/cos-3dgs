[优化方向备忘]

1) 分裂与内存/速度
- 训练期分裂“分块/流式执行”：按批获取 candidate 原始点做精确分裂与渲染，避免一次性爆显存；批大小自适应显存。
- 预分裂导出分块（已实现）：必要时进一步自动调参（batch_size、t_sigma_range、max_k）。
- 渲染期也支持分块分裂：每帧按批生成 split 高斯并立刻喂入 rasterizer，降低峰值显存。
- 精确分裂核向量化再优化：消除 Python for-loop，采用张量分组运算与高级 index_reduce_ 聚合。

2) 草地等高频区域优先策略
- “草地掩码优先分裂/密集化”：基于图像域 Sobel/拉普拉斯建立高频概率图，投影到3D后提升该区域分裂/克隆的优先级与额度。
- 分裂方向引导：对掩码区域鼓励 wave 与局部纹理主方向对齐（小权重方向相似度正则）。
- 分裂阈值自适应：对掩码区域放宽 top_ratio、t_sigma_range；对非高频区域收紧。

3) wave 学习增强
- 高频阶段进一步降低 lambda_wave_reg，对高残差对应的点单独提高 wave 学习率（或减小其正则）。
- 分裂-重投梯度闭环：分裂后对“成功带来误差下降”的原点/子点暂时放宽正则、提高 lr，形成正反馈。

4) 可视化与调试
- 渲染前打印/直方图：colors_precomp、opacity、radii、visibility 的 min/max/均值（开关式）。
- 保存预分裂时同时输出 split_info 的详细统计：每点拆分数分布、中心项比例、sigma_m 的范围。
- 训练日志对 get_split_data 的来源标注（精确/矢量化/分块）与被拒原因（阈值/比率/显存）。

5) 负载与稳定性
- 自适应 OOM 防线：根据最近几步的分裂占用自动调节 split_max_extra_ratio 与 batch_size。
- JIT/torch.compile 对分裂算子尝试加速；关键数学块转 C++/CUDA（仅在必要时）。

6) 其它
- 预分裂导出参数外露至 CLI：--split-max-k、--split-range、--split-batch-size、--force-presplit。
- 结果一致性检查：训练期动态分裂与预分裂导出的统计对齐（数量、尺度、方向）。
